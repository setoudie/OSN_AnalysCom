import streamlit as st
import pandas as pd
import spacy
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from collections import Counter
from textblob import TextBlob
from textblob_fr import PatternAnalyzer
import io


# Charger le mod√®le spaCy XXXX 
@st.cache_resource
def load_spacy_model():
    return spacy.load("fr_core_news_md")


nlp = load_spacy_model()


# Fonction d'extraction des mots-cl√©s
def extract_keywords(comment, num_keywords=4):
    if not comment or pd.isna(comment):
        return []

    doc = nlp(str(comment))
    keywords = []

    # Liste personnalis√©e de stopwords fran√ßais
    custom_stopwords = {"avis", "client", "produit", "service", "entreprise", "soci√©t√©"}

    for token in doc:
        if (token.pos_ in ['NOUN', 'VERB', 'ADJ'] and
                not token.is_stop and
                not token.is_punct and
                len(token.lemma_) > 2 and
                token.lemma_.lower() not in custom_stopwords):
            keywords.append(token.lemma_.lower())

    keyword_counts = Counter(keywords)
    return [word for word, _ in keyword_counts.most_common(num_keywords)]


# Analyse de sentiment am√©lior√©e
def enhanced_sentiment_analysis(comment, keywords):
    blob = TextBlob(str(comment), analyzer=PatternAnalyzer())
    polarity = blob.sentiment[0]

    # Dictionnaire √©tendu de mots √† forte polarit√©
    POSITIVE_WORDS = {"excellent", "super", "parfait", "recommand√©", "g√©nial", "satisfait",
                      "efficace", "rapide", "professionnel", "agr√©able"}
    NEGATIVE_WORDS = {"d√©√ßu", "mauvais", "horrible", "√©viter", "probl√®me", "d√©fectueux",
                      "lent", "cher", "compliqu√©", "d√©ception"}

    for word in keywords:
        if word in POSITIVE_WORDS:
            polarity = min(1.0, polarity + 0.15)
        elif word in NEGATIVE_WORDS:
            polarity = max(-1.0, polarity - 0.15)

    if polarity > 0.2:
        return "Positif", polarity
    elif polarity < -0.2:
        return "N√©gatif", polarity
    else:
        return "Neutre", polarity


# Interface Streamlit
st.set_page_config(page_title="Analyse de Commentaires", layout="wide")
st.title("üìä Analyse Optimis√©e des Commentaires Clients")

# Chargement des donn√©es
uploaded_file = st.file_uploader("T√©l√©charger un fichier de commentaires (CSV)", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # V√©rifier la pr√©sence de la colonne "Zone"
    if 'Zone' not in df.columns:
        df['Zone'] = "Non sp√©cifi√©e"

    # Traitement des commentaires
    with st.spinner("Analyse des commentaires en cours..."):
        df['Mots_cles'] = df['Commentaire'].apply(extract_keywords)
        df[['Sentiment', 'Polarite']] = df.apply(
            lambda row: enhanced_sentiment_analysis(row['Commentaire'], row['Mots_cles']),
            axis=1, result_type='expand'
        )

    # ===== FILTRES =====
    st.sidebar.header("Filtres")

    # Filtre par zone
    zones = ["Toutes les zones"] + list(df['Zone'].unique())
    selected_zone = st.sidebar.selectbox("Zone g√©ographique", zones)

    # Filtre par sentiment
    sentiments = ["Tous"] + list(df['Sentiment'].unique())
    selected_sentiment = st.sidebar.selectbox("Type de sentiment", sentiments)

    # Appliquer les filtres
    filtered_df = df.copy()

    if selected_zone != "Toutes les zones":
        filtered_df = filtered_df[filtered_df['Zone'] == selected_zone]

    if selected_sentiment != "Tous":
        filtered_df = filtered_df[filtered_df['Sentiment'] == selected_sentiment]

    # ===== T√âL√âCHARGEMENT =====
    st.sidebar.header("Exporter les r√©sultats")

    # Format d'export
    export_format = st.sidebar.radio("Format d'export", ["CSV", "Excel"])


    # Fonction de conversion pour le t√©l√©chargement
    def convert_df_to_csv(df):
        return df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')


    def convert_df_to_excel(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Commentaires')
        return output.getvalue()


    # Bouton de t√©l√©chargement
    if export_format == "CSV":
        st.sidebar.download_button(
            label="T√©l√©charger les r√©sultats (CSV)",
            data=convert_df_to_csv(filtered_df),
            file_name='commentaires_analyses.csv',
            mime='text/csv'
        )
    else:
        st.sidebar.download_button(
            label="T√©l√©charger les r√©sultats (Excel)",
            data=convert_df_to_excel(filtered_df),
            file_name='commentaires_analyses.xlsx',
            mime='application/vnd.ms-excel'
        )

    # ===== AFFICHAGE DES R√âSULTATS =====
    # KPI en haut de page
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total commentaires", len(filtered_df))
    with col2:
        pos_count = len(filtered_df[filtered_df['Sentiment'] == 'Positif'])
        st.metric("Commentaires positifs", f"{pos_count} ({pos_count / len(filtered_df) * 100:.1f}%)")
    with col3:
        neg_count = len(filtered_df[filtered_df['Sentiment'] == 'N√©gatif'])
        st.metric("Commentaires n√©gatifs", f"{neg_count} ({neg_count / len(filtered_df) * 100:.1f}%)")

    # Tableau des r√©sultats
    st.subheader("Commentaires analys√©s")
    st.dataframe(filtered_df[['Commentaire', 'Zone', 'Mots_cles', 'Sentiment', 'Polarite']].head(20),
                 height=600)

    # Graphiques
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("R√©partition des sentiments")
        sentiment_counts = filtered_df['Sentiment'].value_counts()
        st.bar_chart(sentiment_counts)

    with col2:
        st.subheader("R√©partition par zone")
        zone_counts = filtered_df['Zone'].value_counts()
        st.bar_chart(zone_counts)

    # Nuage de mots-cl√©s
    st.subheader("Nuage de mots-cl√©s")

    if len(filtered_df) > 0:
        all_keywords = [word for sublist in filtered_df['Mots_cles'] for word in sublist]

        if all_keywords:
            keyword_freq = Counter(all_keywords)

            # Cr√©ation du wordcloud avec des param√®tres am√©lior√©s
            wordcloud = WordCloud(
                width=1200,
                height=600,
                background_color='white',
                colormap='viridis',
                max_words=50,
                max_font_size=150,
                collocations=False
            ).generate_from_frequencies(keyword_freq)

            # Affichage
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.imshow(wordcloud, interpolation='bilinear')
            ax.axis('off')
            st.pyplot(fig)

            # Top 20 des mots-cl√©s
            st.caption("Top 20 des mots-cl√©s les plus fr√©quents")
            top_keywords = pd.DataFrame(keyword_freq.most_common(20), columns=['Mot-cl√©', 'Fr√©quence'])
            st.bar_chart(top_keywords.set_index('Mot-cl√©'))
        else:
            st.warning("Aucun mot-cl√© d√©tect√© dans les commentaires filtr√©s.")
    else:
        st.warning("Aucun commentaire √† afficher avec les filtres s√©lectionn√©s.")

    # Analyse d√©taill√©e par zone
    st.subheader("Analyse par zone")

    if len(filtered_df['Zone'].unique()) > 1:
        zone_analysis = filtered_df.groupby('Zone')['Sentiment'].value_counts(normalize=True).unstack()
        zone_analysis = zone_analysis.fillna(0)
        zone_analysis = zone_analysis[['Positif', 'Neutre', 'N√©gatif']] * 100

        st.dataframe(zone_analysis.style.format("{:.1f}%").background_gradient(cmap='Blues'))
    else:
        st.info("S√©lectionnez plusieurs zones pour comparer les performances")

# Instructions
with st.expander("‚ÑπÔ∏è Guide d'utilisation"):
    st.markdown("""
    **Comment utiliser cette application :**
    1. T√©l√©chargez un fichier CSV contenant des commentaires clients
    2. Utilisez les filtres dans la barre lat√©rale pour affiner l'analyse
    3. Explorez les r√©sultats dans les diff√©rentes sections
    4. T√©l√©chargez les r√©sultats analys√©s au format CSV ou Excel

    **Format du fichier attendu :**
    - Colonne obligatoire : `Commentaire` (texte des commentaires)
    - Colonne optionnelle : `Zone` (pour le filtrage g√©ographique)
    - Toutes les autres colonnes seront conserv√©es mais non utilis√©es dans l'analyse

    **Optimisations incluses :**
    - Extraction des 4 mots-cl√©s les plus pertinents par commentaire
    - Analyse de sentiment am√©lior√©e avec dictionnaire personnalis√©
    - Nuage de mots bas√© uniquement sur les mots-cl√©s extraits
    - Filtres par zone g√©ographique et par type de sentiment
    - T√©l√©chargement des r√©sultats au format CSV ou Excel
    """)

st.sidebar.markdown("---")
st.sidebar.info("Made with ‚ù§Ô∏è by Seny | v1.0")